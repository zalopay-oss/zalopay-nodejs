/*
* The version of the ZaloPay OpenAPI document: v1.0.0
* Contact: developer@zalopay.vn
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit this class manually.
*/

export * from "./agreementBalanceRequest";
export * from "./agreementBalanceResponse";
export * from "./agreementBalanceResponseDataInner";
export * from "./agreementBindRequest";
export * from "./agreementBindResponse";
export * from "./agreementPayRequest";
export * from "./agreementPayResponse";
export * from "./agreementQueryRequest";
export * from "./agreementQueryResponse";
export * from "./agreementQueryResponseData";
export * from "./agreementQueryUserRequest";
export * from "./agreementQueryUserResponse";
export * from "./agreementUnbindRequest";
export * from "./agreementUnbindResponse";
export * from "./disbursementQueryMerchantBalanceRequest";
export * from "./disbursementQueryMerchantBalanceResponse";
export * from "./disbursementQueryMerchantBalanceResponseData";
export * from "./disbursementQueryOrderRequest";
export * from "./disbursementQueryOrderResponse";
export * from "./disbursementQueryOrderResponseData";
export * from "./disbursementQueryUserRequest";
export * from "./disbursementQueryUserResponse";
export * from "./disbursementQueryUserResponseData";
export * from "./disbursementTopupRequest";
export * from "./disbursementTopupResponse";
export * from "./disbursementTopupResponseData";
export * from "./gatewayBankItem";
export * from "./gatewayGetListBanksResponse";
export * from "./gatewayGetListBanksResponseBanks";
export * from "./orderCreateRequest";
export * from "./orderCreateResponse";
export * from "./orderQueryRequest";
export * from "./orderQueryResponse";
export * from "./refundCreateRequest";
export * from "./refundCreateResponse";
export * from "./refundQueryRequest";
export * from "./refundQueryResponse";
export * from "./zodCreateInvoiceRequest";
export * from "./zodCreateInvoiceRequestOrderInfoInner";
export * from "./zodCreateInvoiceRequestReceiver";
export * from "./zodCreateInvoiceResponse";
export * from "./zodQueryInvoiceResponse";
export * from "./zodQueryStatusResponse";


import { AgreementBalanceRequest } from "./agreementBalanceRequest";
import { AgreementBalanceResponse } from "./agreementBalanceResponse";
import { AgreementBalanceResponseDataInner } from "./agreementBalanceResponseDataInner";
import { AgreementBindRequest } from "./agreementBindRequest";
import { AgreementBindResponse } from "./agreementBindResponse";
import { AgreementPayRequest } from "./agreementPayRequest";
import { AgreementPayResponse } from "./agreementPayResponse";
import { AgreementQueryRequest } from "./agreementQueryRequest";
import { AgreementQueryResponse } from "./agreementQueryResponse";
import { AgreementQueryResponseData } from "./agreementQueryResponseData";
import { AgreementQueryUserRequest } from "./agreementQueryUserRequest";
import { AgreementQueryUserResponse } from "./agreementQueryUserResponse";
import { AgreementUnbindRequest } from "./agreementUnbindRequest";
import { AgreementUnbindResponse } from "./agreementUnbindResponse";
import { DisbursementQueryMerchantBalanceRequest } from "./disbursementQueryMerchantBalanceRequest";
import { DisbursementQueryMerchantBalanceResponse } from "./disbursementQueryMerchantBalanceResponse";
import { DisbursementQueryMerchantBalanceResponseData } from "./disbursementQueryMerchantBalanceResponseData";
import { DisbursementQueryOrderRequest } from "./disbursementQueryOrderRequest";
import { DisbursementQueryOrderResponse } from "./disbursementQueryOrderResponse";
import { DisbursementQueryOrderResponseData } from "./disbursementQueryOrderResponseData";
import { DisbursementQueryUserRequest } from "./disbursementQueryUserRequest";
import { DisbursementQueryUserResponse } from "./disbursementQueryUserResponse";
import { DisbursementQueryUserResponseData } from "./disbursementQueryUserResponseData";
import { DisbursementTopupRequest } from "./disbursementTopupRequest";
import { DisbursementTopupResponse } from "./disbursementTopupResponse";
import { DisbursementTopupResponseData } from "./disbursementTopupResponseData";
import { GatewayBankItem } from "./gatewayBankItem";
import { GatewayGetListBanksResponse } from "./gatewayGetListBanksResponse";
import { GatewayGetListBanksResponseBanks } from "./gatewayGetListBanksResponseBanks";
import { OrderCreateRequest } from "./orderCreateRequest";
import { OrderCreateResponse } from "./orderCreateResponse";
import { OrderQueryRequest } from "./orderQueryRequest";
import { OrderQueryResponse } from "./orderQueryResponse";
import { RefundCreateRequest } from "./refundCreateRequest";
import { RefundCreateResponse } from "./refundCreateResponse";
import { RefundQueryRequest } from "./refundQueryRequest";
import { RefundQueryResponse } from "./refundQueryResponse";
import { ZodCreateInvoiceRequest } from "./zodCreateInvoiceRequest";
import { ZodCreateInvoiceRequestOrderInfoInner } from "./zodCreateInvoiceRequestOrderInfoInner";
import { ZodCreateInvoiceRequestReceiver } from "./zodCreateInvoiceRequestReceiver";
import { ZodCreateInvoiceResponse } from "./zodCreateInvoiceResponse";
import { ZodQueryInvoiceResponse } from "./zodQueryInvoiceResponse";
import { ZodQueryStatusResponse } from "./zodQueryStatusResponse";

/* tslint:disable:no-unused-variable */
const primitives = [
  "string",
  "boolean",
  "double",
  "integer",
  "long",
  "float",
  "number",
  "any"
];

const enumsMap: {[index: string]: any} = {
  "AgreementBindRequest.BindingTypeEnum": AgreementBindRequest.BindingTypeEnum,
  "OrderCreateRequest.ProductCodeEnum": OrderCreateRequest.ProductCodeEnum,
};

const typeMap: {[index: string]: any} = {
  "AgreementBalanceRequest": AgreementBalanceRequest,
  "AgreementBalanceResponse": AgreementBalanceResponse,
  "AgreementBalanceResponseDataInner": AgreementBalanceResponseDataInner,
  "AgreementBindRequest": AgreementBindRequest,
  "AgreementBindResponse": AgreementBindResponse,
  "AgreementPayRequest": AgreementPayRequest,
  "AgreementPayResponse": AgreementPayResponse,
  "AgreementQueryRequest": AgreementQueryRequest,
  "AgreementQueryResponse": AgreementQueryResponse,
  "AgreementQueryResponseData": AgreementQueryResponseData,
  "AgreementQueryUserRequest": AgreementQueryUserRequest,
  "AgreementQueryUserResponse": AgreementQueryUserResponse,
  "AgreementUnbindRequest": AgreementUnbindRequest,
  "AgreementUnbindResponse": AgreementUnbindResponse,
  "DisbursementQueryMerchantBalanceRequest": DisbursementQueryMerchantBalanceRequest,
  "DisbursementQueryMerchantBalanceResponse": DisbursementQueryMerchantBalanceResponse,
  "DisbursementQueryMerchantBalanceResponseData": DisbursementQueryMerchantBalanceResponseData,
  "DisbursementQueryOrderRequest": DisbursementQueryOrderRequest,
  "DisbursementQueryOrderResponse": DisbursementQueryOrderResponse,
  "DisbursementQueryOrderResponseData": DisbursementQueryOrderResponseData,
  "DisbursementQueryUserRequest": DisbursementQueryUserRequest,
  "DisbursementQueryUserResponse": DisbursementQueryUserResponse,
  "DisbursementQueryUserResponseData": DisbursementQueryUserResponseData,
  "DisbursementTopupRequest": DisbursementTopupRequest,
  "DisbursementTopupResponse": DisbursementTopupResponse,
  "DisbursementTopupResponseData": DisbursementTopupResponseData,
  "GatewayBankItem": GatewayBankItem,
  "GatewayGetListBanksResponse": GatewayGetListBanksResponse,
  "GatewayGetListBanksResponseBanks": GatewayGetListBanksResponseBanks,
  "OrderCreateRequest": OrderCreateRequest,
  "OrderCreateResponse": OrderCreateResponse,
  "OrderQueryRequest": OrderQueryRequest,
  "OrderQueryResponse": OrderQueryResponse,
  "RefundCreateRequest": RefundCreateRequest,
  "RefundCreateResponse": RefundCreateResponse,
  "RefundQueryRequest": RefundQueryRequest,
  "RefundQueryResponse": RefundQueryResponse,
  "ZodCreateInvoiceRequest": ZodCreateInvoiceRequest,
  "ZodCreateInvoiceRequestOrderInfoInner": ZodCreateInvoiceRequestOrderInfoInner,
  "ZodCreateInvoiceRequestReceiver": ZodCreateInvoiceRequestReceiver,
  "ZodCreateInvoiceResponse": ZodCreateInvoiceResponse,
  "ZodQueryInvoiceResponse": ZodQueryInvoiceResponse,
  "ZodQueryStatusResponse": ZodQueryStatusResponse,
};

export class ObjectSerializer {
  public static findCorrectType(data: any, expectedType: string) {
    if (data == undefined) {
      return expectedType;
    } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
      return expectedType;
    } else if (expectedType === "Date") {
      return expectedType;
    } else {
      if (enumsMap[expectedType]) {
        return expectedType;
      }

      if (!typeMap[expectedType]) {
        return expectedType; // w/e we don't know the type
      }

      // Check the discriminator
      const discriminatorProperty = typeMap[expectedType].discriminator;
      if (discriminatorProperty == null) {
        return expectedType; // the type does not have a discriminator. use it.
      } else {
        if (data[discriminatorProperty]) {
          const discriminatorType = data[discriminatorProperty];
          if(typeMap[discriminatorType]){
            return discriminatorType; // use the type given in the discriminator
          } else {
            return expectedType; // discriminator did not map to a type
          }
        } else {
          return expectedType; // discriminator was not present (or an empty string)
        }
      }
    }
  }

  public static serialize(data: any, type: string) {
    if (data == undefined) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
      let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
      subType = subType.substring(0, subType.length - 1); // Type> => Type
      const transformedData: any[] = [];
      for (let index = 0; index < data.length; index++) {
        const datum = data[index];
        transformedData.push(ObjectSerializer.serialize(datum, subType));
      }
      return transformedData;
    } else if (type === "Date") {
      return data.toISOString();
    } else if (type === "SaleToAcquirerData") {
      const dataString = JSON.stringify(data);
      return Buffer.from(dataString).toString("base64");
    } else {
      if (enumsMap[type]) {
        return data;
      }
      if (!typeMap[type]) { // in case we dont know the type
        return data;
      }

      // Get the actual type of this object
      type = this.findCorrectType(data, type);

      // get the map for the correct type.
      const attributeTypes = typeMap[type].getAttributeTypeMap();
      const instance: {[index: string]: any} = {};
      for (let index = 0; index < attributeTypes.length; index++) {
        const attributeType = attributeTypes[index];
        instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
      }
      return instance;
    }
  }

  public static deserialize(data: any, type: string) {
    // polymorphism may change the actual type.
    type = ObjectSerializer.findCorrectType(data, type);
    if (data == undefined) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
      let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
      subType = subType.substring(0, subType.length - 1); // Type> => Type
      const transformedData: any[] = [];
      for (let index = 0; index < data.length; index++) {
        const datum = data[index];
        transformedData.push(ObjectSerializer.deserialize(datum, subType));
      }
      return transformedData;
    } else if (type === "Date") {
      return new Date(data);
    } else {
      if (enumsMap[type]) {// is Enum
        return data;
      }

      if (!typeMap[type]) { // dont know the type
        return data;
      }
      const instance = new typeMap[type]();
      const attributeTypes = typeMap[type].getAttributeTypeMap();
      for (let index = 0; index < attributeTypes.length; index++) {
        const attributeType = attributeTypes[index];
        instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
      }
      return instance;
    }
  }
}
